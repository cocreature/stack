.TH STACK 1 "" "1.14.0.4"
.SH NAME
stack - The Haskell Tool Stack
.SH SYNOPSIS
.sp
.nf
\fIstack [\-\-version] [\-\-help] [\-\-docker*] ([\-\-verbosity VERBOSITY] |
      [\-v|\-\-verbose]) ([\-\-system\-ghc] | [\-\-no\-system\-ghc])
      ([\-\-install\-ghc] | [\-\-no\-install\-ghc]) [\-\-arch ARCH] [\-\-os OS]
      [\-j|\-\-jobs JOBS] [\-\-extra\-include\-dirs DIR] [\-\-extra\-lib\-dirs DIR]
      ([\-\-skip\-ghc\-check] | [\-\-no\-skip\-ghc\-check]) ([\-\-skip\-msys] |
      [\-\-no\-skip\-msys]) [\-\-resolver RESOLVER] [\-\-no\-terminal]
      [\-\-stack\-yaml STACK\-YAML] COMMAND
.fi
.sp
.SH "DESCRIPTION"
.SS The Haskell Tool Stack
.PP
\f[B]stack\fR is a cross\-platform program for developing Haskell
projects.
It is aimed at Haskellers both new and experienced.
.PP
.PP
It features:
.IP \[bu] 2
Installing GHC automatically.
.IP \[bu] 2
Installing packages needed for your project.
.IP \[bu] 2
Building your project.
.IP \[bu] 2
Testing your project.
.IP \[bu] 2
Benchmarking your project.
.SS How to use
.PP
Go into a Haskell project directory and run \f[C]stack\ build\f[].
If everything is already configured, this will:
.IP \[bu] 2
Download the package index.
.IP \[bu] 2
Download and install all necessary dependencies for the project.
.IP \[bu] 2
Build and install the project.
.PP
You may be prompted to run some of the following along the way:
.IP \[bu] 2
\f[B]stack\ new\f[] to create a brand new project.
.IP \[bu] 2
\f[B]stack\ init\f[] to create a stack configuration file for an
existing project. stack will figure out what Stackage release (LTS or nightly) is
appropriate for the dependencies.
.IP \[bu] 2
\f[B]stack\ setup\f[] to download and install the correct GHC version.
(For information on installation paths, please use the
\f[B]stack\ path\f[] command.)
.PP
.PP stack - The Haskell Tool Stack

.SH "STACK COMMANDS"

.PP
\fBbuild\fR
.RS 4
Build the project(s) in this directory/configuration\&
.RE
.PP
\fBinstall\fR
.RS 4
Build executables and install to a user path\&
.RE
.PP
\fBtest\fR
.RS 4
Build and test the project(s) in this directory/configuration\&
.RE
.PP
\fBbench\fR
.RS 4
Build and benchmark the project(s) in this directory/configuration\&
.RE
.PP
\fBhaddock\fR
.RS 4
Generate haddocks for the project(s) in this directory/configuration\&
.RE
.PP
\fBnew\fR
.RS 4
Create a brand new project\&
.RE
.PP
\fBinit\fR
.RS 4
Initialize a stack project based on one or more cabal packages\&
.RE
.PP
\fBsolver\fR
.RS 4
Use a dependency solver to try and determine missing extra-deps\&
.RE
.PP
\fBsetup\fR
.RS 4
Get the appropriate ghc for your project\&
.RE
.PP
\fBpath\fR
.RS 4
Print out handy path information\&
.RE
.PP
\fBunpack\fR
.RS 4
Unpack one or more packages locally\&
.RE
.PP
\fBupdate\fR
.RS 4
Update the package index\&
.RE
.PP
\fBupgrade\fR
.RS 4
Upgrade to the latest stack (experimental)\&
.RE
.PP
\fBupload\fR
.RS 4
Upload a package to Hackage\&
.RE
.PP
\fBdot\fR
.RS 4
Visualize your project's dependency graph using Graphviz dot\&
.RE
.PP
\fBexec\fR
.RS 4
Execute a command\&
.RE
.PP
\fBghc\fR
.RS 4
Run ghc\&
.RE
.PP
\fBghci\fR
.RS 4
Run ghci in the context of project(s)\&
.RE
.PP
\fBide\fR
.RS 4
Run ide-backend-client with the correct arguments\&
.RE
.PP
\fBrunghc\fR
.RS 4
Run runghc\&
.RE
.PP
\fBclean\fR
.RS 4
Clean the local packages\&
.RE
.PP
\fBdocker\fR
.RS 4
Subcommands specific to Docker use\&
.RE
.PP

.SH "OPTIONS"
.SS "GLOBAL OPTIONS"
.if
.PP
\-\-version
.RS 4
Show version\&
.RE
.PP
\-\-help
.RS 4
Show this help text\&
.RE
.PP
\-\-docker*
.RS 4
Run 'stack \-\-docker\-help' for details\&
.RE
.PP
\-\-verbosity VERBOSITY
.RS 4
Verbosity: silent, error, warn, info, debug\&
.RE
.PP
\-v,\-\-verbose
.RS 4
Enable verbose mode: verbosity level "debug"\&
.RE
.PP
\-\-system\-ghc
.RS 4
Enable using the system installed GHC (on the PATH) if available and a matching version\&
.RE
.PP
\-\-no\-system\-ghc
.RS 4
Disable using the system installed GHC (on the PATH) if available and a matching version
.RE
.PP
\-\-install\-ghc
.RS 4
Enable downloading and installing GHC if necessary (can be done manually with stack setup)
.RE
.PP
\-\-no\-install\-ghc
.RS 4
Disable downloading and installing GHC if necessary (can be done manually with stack setup)
.RE
.PP
\-\-arch ARCH
.RS 4
System architecture, e.g. i386, x86_64
.RE
.PP
\-\-os OS
.RS 4
Operating system, e.g. linux, windows
.RE
.PP
\-j,\-\-jobs JOBS
.RS 4
Number of concurrent jobs to run
.RE
.PP
\-\-extra\-include\-dirs DIR
.RS 4
Extra directories to check for C header files
.RE
.PP
\-\-extra\-lib\-dirs DIR
.RS 4
Extra directories to check for libraries
.RE
.PP
\-\-skip\-ghc\-check
.RS 4
Enable skipping the GHC version and architecture check
.RE
.PP
\-\-no\-skip\-ghc\-check
.RS 4
Disable skipping the GHC version and architecture check
.RE
.PP
\-\-skip\-msys
.RS 4
Enable skipping the local MSYS installation (Windows only)
.RE
.PP
\-\-no\-skip\-msys
.RS 4
Disable skipping the local MSYS installation (Windows only)
.RE
.PP
\-\-resolver RESOLVER
.RS 4
Override resolver in project file
.RE
.PP
\-\-no\-terminal
.RS 4
Override terminal detection in the case of running in a false terminal
.RE
.PP
\-\-stack\-yaml STACK\-YAML
.RS 4
Override project stack.yaml file (overrides any STACK_YAML environment variable)
.RE
.PP
.SS "BUILD OPTIONS"
The following options are shared between the build, install, test, haddock, and bench commands.
.fi
.PP
TARGET
.RS 4
If none specified, use all packages defined in current directory
.RE
.PP
\-\-library\-profiling
.RS 4
Enable library profiling for TARGETs and all its dependencies
.RE
.PP
\-\-no\-library\-profiling
.RS 4
Disable library profiling for TARGETs and all its dependencies
.RE
.PP
\-\-executable\-profiling
.RS 4
Enable library profiling for TARGETs and all its dependencies
.RE
.PP
\-\-no\-executable\-profiling
.RS 4
Disable library profiling for TARGETs and all its dependencies
.RE
.PP
\-\-optimizations
.RS 4
Enable optimizations for TARGETs and all its dependencies
.RE
.PP
\-\-no\-optimizations
.RS 4
Disable optimizations for TARGETs and all its dependencies
.RE
.PP
\-\-haddock
.RS 4
Enable building Haddocks
.RE
.PP
\-\-no\-haddock
.RS 4
Disable building Haddocks
.RE
.PP
\-\-dry\-run
.RS 4
Don't build anything, just prepare to
.RE
.PP
\-\-pedantic
.RS 4
Turn on \-Wall and \-Werror (note: option name may change in the future
.RE
.PP
\-\-ghc\-options OPTION
.RS 4
Additional options passed to GHC
.RE
.PP
\-\-flag PACKAGE:[\-]FLAG
.RS 4
Override flags set in stack.yaml (applies to local packages and extra\-deps)
.RE
.PP
\-\-prefetch
.RS 4
Fetch packages necessary for the build immediately, useful with \-\-dry\-run
.RE
.PP
\-\-only\-snapshot
.RS 4
Only build packages for the snapshot database, not the local database
.RE
.PP
\-\-file\-watch
.RS 4
Watch for changes in local files and automatically rebuild
.RE
.PP
\-\-keep\-going
.RS 4
Enable continue running after a step fails (default: false for build, true for test/bench)
.RE
.PP
\-\-no\-keep\-going
.RS 4
Disable continue running after a step fails (default: false for build, true for test/bench)
.RE
.PP
.SS "ADDITIONAL OPTIONS"
Additional options can be read by running \fBstack\fR <command> \fB\-\-help\fR

.SS "ENVIRONMENTAL VARIABLES"
\fBSTACK_YAML\fR
.RS 4
The path to the project's yaml config file, if unset will default to "./stack.yaml"\&
.RE
.PP

.SH "REPORTING BUGS"
.sp
Report bugs to the issue tracker<https://www.github.com/commercialhaskell/stack> where the development and maintenance is primarily done\&.
